// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schedulerrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduledJobServiceClient is the client API for ScheduledJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduledJobServiceClient interface {
	CreateScheduledJob(ctx context.Context, in *CreateScheduledJobRequest, opts ...grpc.CallOption) (*CreateScheduledJobResponse, error)
}

type scheduledJobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduledJobServiceClient(cc grpc.ClientConnInterface) ScheduledJobServiceClient {
	return &scheduledJobServiceClient{cc}
}

func (c *scheduledJobServiceClient) CreateScheduledJob(ctx context.Context, in *CreateScheduledJobRequest, opts ...grpc.CallOption) (*CreateScheduledJobResponse, error) {
	out := new(CreateScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/scheduler.ScheduledJobService/CreateScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduledJobServiceServer is the server API for ScheduledJobService service.
// All implementations must embed UnimplementedScheduledJobServiceServer
// for forward compatibility
type ScheduledJobServiceServer interface {
	CreateScheduledJob(context.Context, *CreateScheduledJobRequest) (*CreateScheduledJobResponse, error)
	mustEmbedUnimplementedScheduledJobServiceServer()
}

// UnimplementedScheduledJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduledJobServiceServer struct {
}

func (UnimplementedScheduledJobServiceServer) CreateScheduledJob(context.Context, *CreateScheduledJobRequest) (*CreateScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledJob not implemented")
}
func (UnimplementedScheduledJobServiceServer) mustEmbedUnimplementedScheduledJobServiceServer() {}

// UnsafeScheduledJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduledJobServiceServer will
// result in compilation errors.
type UnsafeScheduledJobServiceServer interface {
	mustEmbedUnimplementedScheduledJobServiceServer()
}

func RegisterScheduledJobServiceServer(s grpc.ServiceRegistrar, srv ScheduledJobServiceServer) {
	s.RegisterService(&ScheduledJobService_ServiceDesc, srv)
}

func _ScheduledJobService_CreateScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledJobServiceServer).CreateScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.ScheduledJobService/CreateScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledJobServiceServer).CreateScheduledJob(ctx, req.(*CreateScheduledJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduledJobService_ServiceDesc is the grpc.ServiceDesc for ScheduledJobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduledJobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.ScheduledJobService",
	HandlerType: (*ScheduledJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduledJob",
			Handler:    _ScheduledJobService_CreateScheduledJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/scheduler/schedulerrpc/scheduler.proto",
}
